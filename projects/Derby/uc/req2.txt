[DERBY-3801] Convert  org.apache.derbyTesting.functionTests.tests.lang.holdCursorIJ.sql  to junit.  [DERBY-3839] Convert  org.apache.derbyTesting.functionTests.tests.store.holdCursorJDBC30.sql  to junit.  [DERBY-3842] Convert  org.apache.derbyTesting.functionTests.tests.store.holdCursorExternalSortJDBC30.sql  to junit. [DERBY-2031] Convert derbynet/testProtocol.java to JUnit [DERBY-3834] Convert derbynet/runtimeinfo to JUnit [DERBY-3838] Convert derbynet/DerbyNetAutoStart to JUnit [DERBY-4314] With derby client setTransactionIsolation executes and commits even if isolation has not changed  [DERBY-1282] Finish client info api for JDBC4. Compliance task. [DERBY-2730] Implement not implemented Embedded methods Blob.getBinaryStream(long pos, long length) and Clob. getCharacterStream(long pos, long length) [DERBY-2653] Expose existing auto-generated key functionality through more JDBC APIs in Derby Client. [DERBY-4767] Detailed prompt for Error XCL16 is different between Client and Embed [DERBY-4777] Different behavior in Client and Embedded modes when update on an invalid cursor [DERBY-4441] Change sysinfo to print out more specific JVM information [DERBY-31] Statement.setQueryTimeout() support. [DERBY-3853] Behaviour of setTypeMap() differs between embedded and client [DERBY-4686] SQLBinary.writeBlob is inefficient, reading one byte at a time from the source BLOB [DERBY-4732] Release system resources in CanonTestCase thoroughly  <p>Convert  org.apache.derbyTesting.functionTests.tests.lang.holdCursorIJ.sql  to junit. </p> <p>testProtocol.java executes DRDA commands from a file written in a special-purpose language. The statements are very much like assertions, so it should be fairly easy to convert the test to JUnit.</p>

<p>Suggested approach: Change the interpreter (TestProto.java) so that is uses Assert.fail() instead of System.err.println() and System.exit(), and BaseTestCase.println() instead of System.out.println(). It should also use TestConfiguration to get the host name and port number.</p> <p>With in EmbedConnection.setIsolation() we have a check to see if the isolation level is the same and if so just return without doing a commit:<br/>
  public void setTransactionIsolation(int level) throws SQLException {</p>

<p>		if (level == getTransactionIsolation())<br/>
			return;</p>


<p>with org.apache.derby.client.am.Connection we have no such check. It would be good if the client driver acted like embedded.</p> <ul class= alternate  type= square >
	<li>The following java.sql.Connection methods need to be finished:</li>
</ul>
<ul>
	<li>getClientInfo()</li>
	<li>getClientInfo(java.lang.String)</li>
	<li>setClientInfo(java.lang.String,java.lang.String)</li>
</ul>
 <p>The following methods were introduced in the java.sql.Clob and java.sql.Blob interface as part of JDBC 4.0 and need to be implemented.</p>

<p>Clob<br/>
------</p>

<p>getCharacterStream(long pos, long length)</p>

<p>Blob<br/>
------</p>

<p>getBinaryStream(long pos, long length)</p>

<p>The implementation on the Network Client is already done as part of Derby-2444</p> <p>See <a href= https://issues.apache.org/jira/browse/DERBY-2631  title= Expose existing auto-generated key functionality through more JDBC APIs in embedded mode.  class= issue-link  data-issue-key= DERBY-2631 ><del>DERBY-2631</del></a> for details.  Desired functionality is the same as for <a href= https://issues.apache.org/jira/browse/DERBY-2631  title= Expose existing auto-generated key functionality through more JDBC APIs in embedded mode.  class= issue-link  data-issue-key= DERBY-2631 ><del>DERBY-2631</del></a>, except that this issue is specifically for Derby Client (<a href= https://issues.apache.org/jira/browse/DERBY-2631  title= Expose existing auto-generated key functionality through more JDBC APIs in embedded mode.  class= issue-link  data-issue-key= DERBY-2631 ><del>DERBY-2631</del></a> only addressed embedded mode).</p> <p>For the sql script below:</p>

<p>create table t1(c11 int, c12 int);</p>

<p>&#8211; insert data into tables<br/>
insert into t1 values(1,1);<br/>
insert into t1 values(2,2);</p>

<p>&#8211; set autocommit off<br/>
autocommit off;</p>

<p>get with nohold cursor jdk1 as  SELECT * FROM t1 ;</p>

<p>&#8211; do fetches from the cursor<br/>
next jdk1;</p>

<p>--commit<br/>
commit;</p>

<p>&#8211; now try the fetch on cursor again after commit<br/>
&#8211; cursors jdk1 will give Error XCL16<br/>
next jdk1;</p>

<p>&#8211; clean up.<br/>
close jdk1;</p>

<p>for the line  next jdk1; , an Error XCL16 will be thrown. However, detailed prompt for Error XCL16 is different between Client and Embed.<br/>
In client mode, we get  ERROR XCL16: ResultSet not open.  Verify that autocommit is OFF. <br/>
While, in embed mode, we get  ERROR XCL16: ResultSet not open. Operation  next  not permitted. Verify that autocommit is OFF. </p> <p>Consider the sql snippet below:</p>

<p>create table test(c1 int, c2 int);<br/>
insert into test values(1,1);<br/>
update test set c1=2 where current of jdk4;</p>

<p>for the  update  line, we get  ERROR XJ202: Invalid cursor name  JDK4 .   in Client mode, while  ERROR 42X30: Cursor  JDK4  not found. Verify that autocommit is OFF.  in Embed mode.</p>

 <p>It would be nice if sysinfo printed out more specific jvm information that is provided with java -version. At least with the IBM jvm the system  properties java.runtime.version and java.fullversion give some more (but not all) information.   More research is needed across multiple jvms to tie it down.  Alternatively sysinfo could dump <b>all</b> the system property information, but that could make the output pretty big and show irrelavant information in some contexts.</p> <p>Calling Statement.setQueryTimeout() throws exception saying that function is not supported. This is an important JDBC feature and is limiting our options to use Derby with our JDBC code. Implementing this JDBC function would make Derby much easier to adopt.</p> <p>On the embedded driver, Connection.setTypeMap() behaves like this (when the connection is not closed):</p>

<ul class= alternate  type= square >
	<li>if the map argument is null, throw an SQLException with SQLState XJ081</li>
</ul>


<ul class= alternate  type= square >
	<li>if the map is not null and not empty, throw an SQLException with SQLState 0A000</li>
</ul>


<ul class= alternate  type= square >
	<li>if the map is not null and empty, do nothing</li>
</ul>


<p>The behaviour on the client driver is this:</p>

<ul class= alternate  type= square >
	<li>always throw an SQLException with SQLState 0A000</li>
</ul>


<p>We should try to make the two drivers behave the same way when setTypeMap() is called. (This would also allow us to simplify some of the tests in J2EEDataSourceTest).</p> <p>SQLBinary.writeBlob is inefficient, since it is only reading one byte at the time from the source BLOB.<br/>
It would be better if a transfer buffer was used to facilitate the write.</p> <p>Now, in the method of compareCanon(String canon) in CanonTestcase, two BufferedReaders----cannonReader and testOutput are closed in try catch block, however if some exception occurs above, the two BufferReaders won t be closed, and related system resources won t be released. </p>

<p>Besides, a releative problem is about the ByteArrayOutputStream rawBytes in CanonTestcase, it s created in getOutputStream() and closed in compareCanon(String canon). It s pointed out by Knut in Derby-2708, ByteArrayOutputStream s javadoc says that closing it has no effect, so tearDown() method has been added  to CanonTestCase and sets rawBytes to null. It certainly can work. However, is it also OK to null out rawBytes in compareCanon(String canon)? If so, it seems cleaner than to null it out in tearDown() method.</p> 