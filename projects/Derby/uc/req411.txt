[DERBY-4520] Refactor and extend data type cloning facilities <p>With the increased use of streams to represent data values, the cloning facilities needs to be improved.</p>

<p>Unless I get pushback, I will proceed by producing patches to reach the following goals:</p>
<ul class= alternate  type= square >
	<li>move the functionality provided by CloneableObject into DataValueDescriptor<br/>
   (all classes implementing CloneableObject also implements DataValueDescriptor)</li>
	<li>introduce the cloning methods cloneValue, cloneState and cloneHolder (all in DataValueDescriptor, see description below)<br/>
   Note that they all return a usable DVD. I m all ears for better names for the clone methods (another suggestion mentioned is cloneDeep, cloneHalfDeep, and cloneShallow).</li>
</ul>


<p>NOTE: See comment below, the method names changed during the course of development.</p>

<p>cloneValue &lt;deep&gt; (new method, functionality was present through combined calls to the DVD public interface) </p>
<ul class= alternate  type= square >
	<li>a DVD obtained through cloneValue is independent of other DVDs and the state of the Derby store</li>
	<li>the data value will be materialized</li>
</ul>


<p>cloneState &lt;halfDeep&gt; (~= DataValueDescriptor.getClone)</p>
<ul class= alternate  type= square >
	<li>a DVD obtained through cloneState is independent of other DVDs, but may depend on the state of the Derby store (due to references to store streams)</li>
	<li>the data value will be materialized if the value is represented by a non-cloneable stream or if Derby believes materializing the value is more appropriate than keeping the stream representation</li>
</ul>


<p>cloneHolder &lt;shallow&gt; (~= CloneableObject.cloneObject)</p>
<ul class= alternate  type= square >
	<li>a DVD obtained through cloneHolder is dependent on the original DVD and its clones made through cloneHolder. If one of the DVDs changes its state, all of them will be affected. Will also be dependent on the state of the Derby store if there are references to store streams.</li>
	<li>the data value will never be materialized due to cloneHolder being invoked</li>
</ul>


<p>For many of the data types, cloneState and cloneHolder will forward to cloneValue.</p>

<p>cloneState will be used the most. cloneValue is currently only required in the sorter. cloneHolder is required (for performance reasons and maybe to avoid OOME) when DVDs pass through temporary holders (BackingStoreHashtable, TemporaryRowHolderImpl). I have not gone through all the usages of cloneState to see if any of them can be, or has to be, replaced with another clone-call.</p>

<p>The ability to clone store streams will be added by Mike s patch attached to <a href= https://issues.apache.org/jira/browse/DERBY-3650  title= internal multiple references from different rows to a single BLOB/CLOB stream leads to various errors when second reference used.  class= issue-link  data-issue-key= DERBY-3650 ><del>DERBY-3650</del></a>.</p>

<ul>
	<li>New method names:<br/>
It turned out that using only two methods was sufficient:<br/>
cloneHolder &lt;shallow&gt; (as above)</li>
</ul>


<p>cloneValue(boolean forceMaterialization) &lt;halfDeep or deep&gt;<br/>
Basically, cloneValue(false) equals cloneState() above, and cloneValue(true) equals cloneValue() above.</p>