[DERBY-670] improve space reclamation from deleted blob/clob columns which are bigger than a page <p>Currently Derby space reclamation is initiated after all the rows on a <br/>
MAIN page are delted.  When blob/clob s larger than a page are involved<br/>
the row on the main page only keeps a pointer to a page chain, so the<br/>
main page rows can be very small and thus may take a lot of rows to be<br/>
deleted before we clean up and reuse space associated with blob/clob.<br/>
So in an extreme case of a table with only a int key and a 1 blob column<br/>
with N bytes , and a 32k <br/>
page derby probably stores more than 1000 rows.  If the app simply does<br/>
insert/delete of a single row it will grow to 1000 * N bytes<br/>
for an app that to the user should only be on the order of N big.</p>

<p>It would seem reasonable to queue a post commit for any delete which<br/>
includes a blob/clob that has been chained.  This is in keeping with<br/>
the current policy to queue the work when it is possible we can reclaim<br/>
an entire page.  </p>

<p>The problem is that there would be an extra cost at delete time to <br/>
determine if the row being deleted has a blob/clob page chain.  The<br/>
actual information is stored in the field header of that particular<br/>
column so currently the only way to check would be to check every<br/>
field header of every column in the deleted row.  From the store s<br/>
point of view every column can be  long  with a page chain &#8211; currently<br/>
it doesn t know that only blob/clob datatypes can cause this behavior.</p>

<p>Some options include:</p>

<p>1 at table create time ask for input from language to say if one of<br/>
  these is at all possible, so that check is never done if not <br/>
  necessary.<br/>
2 Maintain a bit in the container header with some sort of indication if any long<br/>
    row exists, may simply 1/0 or a reference count.   Note information is easily<br/>
     available at insert time.<br/>
3 maintain a bit in the page indicating if any long rows exist<br/>
4 maintain a bit in the record header if any long columns exist,  note the existing bit<br/>
    is only if the whole record is overflowed, not if a single column is overflowed.</p>

<p>options 1-3 would then be used to only perform the slow check at delete time if  necessary.</p>

<p>I don t really like option 1 unless we change the storage interface to actually check/guarantee the behavior.</p>

<p>I lean toward option 4, but it is sort of a row format change.  Given that the system has room saved for this<br/>
bit I believe we can use it without any sort of upgrade-time work necessary - though I believe it can only be set on a<br/>
hard upgrade as there may be old code which does not expect it to be set.  Soft upgrades won t get the<br/>
benefit and existing data won t get the benefit.</p>

<p>Any other ideas out there?</p>