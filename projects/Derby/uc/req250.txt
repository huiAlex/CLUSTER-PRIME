[DERBY-2569] The check to see if two DataTypeDescriptors(DTDs) are comparable or not needs to consider collation into decision. <p>Currently, when Derby needs to check if 2 DTDs are comparable or not, it calls TypeCompiler.comparable method. This method now has to move to DTD because we should consider collation information while deciding if 2 DTDs are comparable or not. That collation information is not available to TypeCompiler but it is available at DTD level. More information on this can be found at <a href= http://www.nabble.com/Re%3A-Changes-to-comparable-method-in-TypeCompiler-tf3603373.html#a10089238  class= external-link  rel= nofollow >http://www.nabble.com/Re%3A-Changes-to-comparable-method-in-TypeCompiler-tf3603373.html#a10089238</a>. Some of the important info from the thread is copied below</p>

<p>&gt; I think what you are suggesting is to move comparable method out from <br/>
&gt; the TypeCompiler and into DataTypeDescriptor altogether. So, the <br/>
&gt; existing code, where we use TypeCompiler to decide if 2 types can be <br/>
&gt; compared or not should now call a method on DTD to determine <br/>
&gt; comparability. This might be cleaner than stuffing collation information <br/>
&gt; in CharTypeCompiler but I am just wondering why was comparable not <br/>
&gt; defined on DTD at the very start. Why do we go through TypeCompiler and <br/>
&gt; what functionality does TypeCompiler provide that DTD does not? In other <br/>
&gt; words, I don t understand the connection between TypeCompiler and DTD <br/>
&gt; and how they fit together. </p>

<p>It s not that TypeCompiler provides functionality that DTD does not, but <br/>
instead DTD has functionality/information that TypeCompiler does not. <br/>
Ignoring the  compiler  aspect for the moment there are two components <br/>
to a DataTypeDescriptor, the underlying SQL type (INTEGER, CHAR, <br/>
VARCHAR, XML etc.) represented as TypeId and attributes of the <br/>
descriptor (nullablity, length, precision, scale and now collation). </p>

<p>Thus </p>

<p>  DTD = TypeId + </p>
{attributes}
<p> </p>

<p>Some functionality is applicable to a type regardless of a specific <br/>
DTD s attributes, thus methods for that functionality can be declared on <br/>
TypeId instead of DTD. </p>

<p>Some functionality on the other hand needs the attribute information as <br/>
well, say the display length of a type is a function of its <br/>
length/precision&amp;scale and its underlying SQL type. </p>

<p>The collation changes have moved the comparable check from being only <br/>
reliant on the SQL type (TypeId) to being dependent on the type s <br/>
attributes (collation type and implicit/explicit). Thus the original <br/>
location for the comparable method made sense, but now does not. </p>

<p>The TypeCompiler/TypeId split was due to an early plan to have a <br/>
execute-only version of the technology, this never happened as there was <br/>
no demand for it. One of the benefits of a SQL engine is the ability to <br/>
execute arbitrary queries, which would not be available in an execute <br/>
only version. Code cleanup could be done here which probably would <br/>
decrease the footrprint of derby. </p>

<p>HTH, <br/>
Dan. </p>