[DERBY-1015] Define interface between network server and engine through Java interfaces. <p>API between the network server and engine is not well defined, leading to inconsistent &amp; multiple ways of handling the different objects returned, such as reflection, explicit casting etc. This in turn has lead to bugs such as <a href= https://issues.apache.org/jira/browse/DERBY-966  title= creating a preparedStatement outside of a Global tran using a ClientXADatasource  will result in an &quot;SqlException: Cannot set holdability&quot;  if the statement  is used in a Global transaction  class= issue-link  data-issue-key= DERBY-966 ><del>DERBY-966</del></a> . <a href= https://issues.apache.org/jira/browse/DERBY-1005  title= getHoldability does not return CLOSE_CURSORS_AT_COMMIT in a global transaction  class= issue-link  data-issue-key= DERBY-1005 ><del>DERBY-1005</del></a>, and <a href= https://issues.apache.org/jira/browse/DERBY-1006  title= Client allows setHoldability to HOLD_CURSORS_OVER_COMMIT  on both connection and statement in a global transaction  class= issue-link  data-issue-key= DERBY-1006 ><del>DERBY-1006</del></a>, and access to underlying objects by the application that should be hidden.</p>

<p>Define interfaces, such as EngineConnection, that both EmbedConnection and BrokeredConnection implement. Thus the network server can rely on the fact that any connection it obtains will implement EngineConnection, and call the required methods through that interface.</p>

<p>Most likely will need EngineConnection, EnginePreparedStatement and EngineResultSet.. These interfaces would be internal to derby and not exposed to applications.</p>