[PIG-1876] Typed map for Pig <p>Currently Pig map type is untyped, which means map value is always of bytearray(ie. unknown) type. In <a href= https://issues.apache.org/jira/browse/PIG-1277  title= Pig should give error message when cogroup on tuple keys of different inner type  class= issue-link  data-issue-key= PIG-1277 ><del>PIG-1277</del></a>, we allow unknown type to be a shuffle key, which somewhat relieve the problem. However, typed map is still beneficial in that:</p>

<p>1. User can make semantic use of the map value type. Currently, user need to explicitly cast map value, which is ugly<br/>
2. Though <a href= https://issues.apache.org/jira/browse/PIG-1277  title= Pig should give error message when cogroup on tuple keys of different inner type  class= issue-link  data-issue-key= PIG-1277 ><del>PIG-1277</del></a> allow unknown type be a shuffle key, the performance suffers. We don t have a raw comparator for the unknown type, instead, we need to instantiate the value object and invoke its comparator</p>

<p>Here is proposed syntax for typed map:<br/>
map<span class= error >&#91;type&#93;</span></p>

<p>Typed map can be used in place of untyped map could occur. For example:<br/>
a = load  1.txt  as(map<span class= error >&#91;int&#93;</span>);<br/>
b = foreach a generate (map<span class= error >&#91;(i:int)&#93;</span>)a0;  - - Map value is tuple<br/>
b = stream a through `cat` as (m:map[</p>
{(i:int,j:chararray)}
<p>]);  - - Map value is bag</p>

<p>MapLookup a typed map will result datatype of map value.<br/>
a = load  1.txt  as(map<span class= error >&#91;int&#93;</span>);<br/>
b = foreach a generate $0# key ;</p>

<p>Schema for b:<br/>
b: </p>
{int}

<p>The behavior of untyped map will remain the same.</p>